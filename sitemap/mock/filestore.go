// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-sitemap/sitemap"
	"io"
	"sync"
)

// Ensure, that FileStoreMock does implement sitemap.FileStore.
// If this is not the case, regenerate this file with moq.
var _ sitemap.FileStore = &FileStoreMock{}

// FileStoreMock is a mock implementation of sitemap.FileStore.
//
// 	func TestSomethingThatUsesFileStore(t *testing.T) {
//
// 		// make and configure a mocked sitemap.FileStore
// 		mockedFileStore := &FileStoreMock{
// 			GetFileFunc: func(name string) (io.ReadCloser, error) {
// 				panic("mock out the GetFile method")
// 			},
// 			SaveFileFunc: func(name string, body io.Reader) error {
// 				panic("mock out the SaveFile method")
// 			},
// 			SaveFilesFunc: func(paths []string) error {
// 				panic("mock out the SaveFiles method")
// 			},
// 		}
//
// 		// use mockedFileStore in code that requires sitemap.FileStore
// 		// and then make assertions.
//
// 	}
type FileStoreMock struct {
	// GetFileFunc mocks the GetFile method.
	GetFileFunc func(name string) (io.ReadCloser, error)

	// SaveFileFunc mocks the SaveFile method.
	SaveFileFunc func(name string, body io.Reader) error

	// SaveFilesFunc mocks the SaveFiles method.
	SaveFilesFunc func(paths []string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetFile holds details about calls to the GetFile method.
		GetFile []struct {
			// Name is the name argument value.
			Name string
		}
		// SaveFile holds details about calls to the SaveFile method.
		SaveFile []struct {
			// Name is the name argument value.
			Name string
			// Body is the body argument value.
			Body io.Reader
		}
		// SaveFiles holds details about calls to the SaveFiles method.
		SaveFiles []struct {
			// Paths is the paths argument value.
			Paths []string
		}
	}
	lockGetFile   sync.RWMutex
	lockSaveFile  sync.RWMutex
	lockSaveFiles sync.RWMutex
}

// GetFile calls GetFileFunc.
func (mock *FileStoreMock) GetFile(name string) (io.ReadCloser, error) {
	if mock.GetFileFunc == nil {
		panic("FileStoreMock.GetFileFunc: method is nil but FileStore.GetFile was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetFile.Lock()
	mock.calls.GetFile = append(mock.calls.GetFile, callInfo)
	mock.lockGetFile.Unlock()
	return mock.GetFileFunc(name)
}

// GetFileCalls gets all the calls that were made to GetFile.
// Check the length with:
//     len(mockedFileStore.GetFileCalls())
func (mock *FileStoreMock) GetFileCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetFile.RLock()
	calls = mock.calls.GetFile
	mock.lockGetFile.RUnlock()
	return calls
}

// SaveFile calls SaveFileFunc.
func (mock *FileStoreMock) SaveFile(name string, body io.Reader) error {
	if mock.SaveFileFunc == nil {
		panic("FileStoreMock.SaveFileFunc: method is nil but FileStore.SaveFile was just called")
	}
	callInfo := struct {
		Name string
		Body io.Reader
	}{
		Name: name,
		Body: body,
	}
	mock.lockSaveFile.Lock()
	mock.calls.SaveFile = append(mock.calls.SaveFile, callInfo)
	mock.lockSaveFile.Unlock()
	return mock.SaveFileFunc(name, body)
}

// SaveFileCalls gets all the calls that were made to SaveFile.
// Check the length with:
//     len(mockedFileStore.SaveFileCalls())
func (mock *FileStoreMock) SaveFileCalls() []struct {
	Name string
	Body io.Reader
} {
	var calls []struct {
		Name string
		Body io.Reader
	}
	mock.lockSaveFile.RLock()
	calls = mock.calls.SaveFile
	mock.lockSaveFile.RUnlock()
	return calls
}

// SaveFiles calls SaveFilesFunc.
func (mock *FileStoreMock) SaveFiles(paths []string) error {
	if mock.SaveFilesFunc == nil {
		panic("FileStoreMock.SaveFilesFunc: method is nil but FileStore.SaveFiles was just called")
	}
	callInfo := struct {
		Paths []string
	}{
		Paths: paths,
	}
	mock.lockSaveFiles.Lock()
	mock.calls.SaveFiles = append(mock.calls.SaveFiles, callInfo)
	mock.lockSaveFiles.Unlock()
	return mock.SaveFilesFunc(paths)
}

// SaveFilesCalls gets all the calls that were made to SaveFiles.
// Check the length with:
//     len(mockedFileStore.SaveFilesCalls())
func (mock *FileStoreMock) SaveFilesCalls() []struct {
	Paths []string
} {
	var calls []struct {
		Paths []string
	}
	mock.lockSaveFiles.RLock()
	calls = mock.calls.SaveFiles
	mock.lockSaveFiles.RUnlock()
	return calls
}
