// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-sitemap/sitemap"
	"io"
	"sync"
)

// Ensure, that FileStoreMock does implement sitemap.FileStore.
// If this is not the case, regenerate this file with moq.
var _ sitemap.FileStore = &FileStoreMock{}

// FileStoreMock is a mock implementation of sitemap.FileStore.
//
//	func TestSomethingThatUsesFileStore(t *testing.T) {
//
//		// make and configure a mocked sitemap.FileStore
//		mockedFileStore := &FileStoreMock{
//			CopyFileFunc: func(src io.Reader, dest io.Writer) error {
//				panic("mock out the CopyFile method")
//			},
//			CreateFileFunc: func(name string) (io.ReadWriteCloser, error) {
//				panic("mock out the CreateFile method")
//			},
//			DeleteFileFunc: func(name string) error {
//				panic("mock out the DeleteFile method")
//			},
//			GetFileFunc: func(name string) (io.ReadCloser, error) {
//				panic("mock out the GetFile method")
//			},
//			SaveFileFunc: func(name string, body io.Reader) error {
//				panic("mock out the SaveFile method")
//			},
//		}
//
//		// use mockedFileStore in code that requires sitemap.FileStore
//		// and then make assertions.
//
//	}
type FileStoreMock struct {
	// CopyFileFunc mocks the CopyFile method.
	CopyFileFunc func(src io.Reader, dest io.Writer) error

	// CreateFileFunc mocks the CreateFile method.
	CreateFileFunc func(name string) (io.ReadWriteCloser, error)

	// DeleteFileFunc mocks the DeleteFile method.
	DeleteFileFunc func(name string) error

	// GetFileFunc mocks the GetFile method.
	GetFileFunc func(name string) (io.ReadCloser, error)

	// SaveFileFunc mocks the SaveFile method.
	SaveFileFunc func(name string, body io.Reader) error

	// calls tracks calls to the methods.
	calls struct {
		// CopyFile holds details about calls to the CopyFile method.
		CopyFile []struct {
			// Src is the src argument value.
			Src io.Reader
			// Dest is the dest argument value.
			Dest io.Writer
		}
		// CreateFile holds details about calls to the CreateFile method.
		CreateFile []struct {
			// Name is the name argument value.
			Name string
		}
		// DeleteFile holds details about calls to the DeleteFile method.
		DeleteFile []struct {
			// Name is the name argument value.
			Name string
		}
		// GetFile holds details about calls to the GetFile method.
		GetFile []struct {
			// Name is the name argument value.
			Name string
		}
		// SaveFile holds details about calls to the SaveFile method.
		SaveFile []struct {
			// Name is the name argument value.
			Name string
			// Body is the body argument value.
			Body io.Reader
		}
	}
	lockCopyFile   sync.RWMutex
	lockCreateFile sync.RWMutex
	lockDeleteFile sync.RWMutex
	lockGetFile    sync.RWMutex
	lockSaveFile   sync.RWMutex
}

// CopyFile calls CopyFileFunc.
func (mock *FileStoreMock) CopyFile(src io.Reader, dest io.Writer) error {
	if mock.CopyFileFunc == nil {
		panic("FileStoreMock.CopyFileFunc: method is nil but FileStore.CopyFile was just called")
	}
	callInfo := struct {
		Src  io.Reader
		Dest io.Writer
	}{
		Src:  src,
		Dest: dest,
	}
	mock.lockCopyFile.Lock()
	mock.calls.CopyFile = append(mock.calls.CopyFile, callInfo)
	mock.lockCopyFile.Unlock()
	return mock.CopyFileFunc(src, dest)
}

// CopyFileCalls gets all the calls that were made to CopyFile.
// Check the length with:
//
//	len(mockedFileStore.CopyFileCalls())
func (mock *FileStoreMock) CopyFileCalls() []struct {
	Src  io.Reader
	Dest io.Writer
} {
	var calls []struct {
		Src  io.Reader
		Dest io.Writer
	}
	mock.lockCopyFile.RLock()
	calls = mock.calls.CopyFile
	mock.lockCopyFile.RUnlock()
	return calls
}

// CreateFile calls CreateFileFunc.
func (mock *FileStoreMock) CreateFile(name string) (io.ReadWriteCloser, error) {
	if mock.CreateFileFunc == nil {
		panic("FileStoreMock.CreateFileFunc: method is nil but FileStore.CreateFile was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockCreateFile.Lock()
	mock.calls.CreateFile = append(mock.calls.CreateFile, callInfo)
	mock.lockCreateFile.Unlock()
	return mock.CreateFileFunc(name)
}

// CreateFileCalls gets all the calls that were made to CreateFile.
// Check the length with:
//
//	len(mockedFileStore.CreateFileCalls())
func (mock *FileStoreMock) CreateFileCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockCreateFile.RLock()
	calls = mock.calls.CreateFile
	mock.lockCreateFile.RUnlock()
	return calls
}

// DeleteFile calls DeleteFileFunc.
func (mock *FileStoreMock) DeleteFile(name string) error {
	if mock.DeleteFileFunc == nil {
		panic("FileStoreMock.DeleteFileFunc: method is nil but FileStore.DeleteFile was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockDeleteFile.Lock()
	mock.calls.DeleteFile = append(mock.calls.DeleteFile, callInfo)
	mock.lockDeleteFile.Unlock()
	return mock.DeleteFileFunc(name)
}

// DeleteFileCalls gets all the calls that were made to DeleteFile.
// Check the length with:
//
//	len(mockedFileStore.DeleteFileCalls())
func (mock *FileStoreMock) DeleteFileCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockDeleteFile.RLock()
	calls = mock.calls.DeleteFile
	mock.lockDeleteFile.RUnlock()
	return calls
}

// GetFile calls GetFileFunc.
func (mock *FileStoreMock) GetFile(name string) (io.ReadCloser, error) {
	if mock.GetFileFunc == nil {
		panic("FileStoreMock.GetFileFunc: method is nil but FileStore.GetFile was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetFile.Lock()
	mock.calls.GetFile = append(mock.calls.GetFile, callInfo)
	mock.lockGetFile.Unlock()
	return mock.GetFileFunc(name)
}

// GetFileCalls gets all the calls that were made to GetFile.
// Check the length with:
//
//	len(mockedFileStore.GetFileCalls())
func (mock *FileStoreMock) GetFileCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetFile.RLock()
	calls = mock.calls.GetFile
	mock.lockGetFile.RUnlock()
	return calls
}

// SaveFile calls SaveFileFunc.
func (mock *FileStoreMock) SaveFile(name string, body io.Reader) error {
	if mock.SaveFileFunc == nil {
		panic("FileStoreMock.SaveFileFunc: method is nil but FileStore.SaveFile was just called")
	}
	callInfo := struct {
		Name string
		Body io.Reader
	}{
		Name: name,
		Body: body,
	}
	mock.lockSaveFile.Lock()
	mock.calls.SaveFile = append(mock.calls.SaveFile, callInfo)
	mock.lockSaveFile.Unlock()
	return mock.SaveFileFunc(name, body)
}

// SaveFileCalls gets all the calls that were made to SaveFile.
// Check the length with:
//
//	len(mockedFileStore.SaveFileCalls())
func (mock *FileStoreMock) SaveFileCalls() []struct {
	Name string
	Body io.Reader
} {
	var calls []struct {
		Name string
		Body io.Reader
	}
	mock.lockSaveFile.RLock()
	calls = mock.calls.SaveFile
	mock.lockSaveFile.RUnlock()
	return calls
}
